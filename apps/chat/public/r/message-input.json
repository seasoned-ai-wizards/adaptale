{
  "name": "message-input",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion@11",
    "remeda@2"
  ],
  "registryDependencies": [
    "button",
    "https://shadcn-chatbot-kit.vercel.app/r/use-autosize-textarea.json",
    "https://shadcn-chatbot-kit.vercel.app/r/file-preview.json",
    "https://shadcn-chatbot-kit.vercel.app/r/audio-visualizer.json",
    "https://shadcn-chatbot-kit.vercel.app/r/interrupt-prompt.json",
    "https://shadcn-chatbot-kit.vercel.app/r/use-audio-recording.json"
  ],
  "files": [
    {
      "path": "ui/message-input.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport { ArrowUp, Info, Loader2, Mic, Paperclip, Square, X } from \"lucide-react\"\nimport { omit } from \"remeda\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useAudioRecording } from \"@/registry/default/hooks/use-audio-recording\"\nimport { useAutosizeTextArea } from \"@/registry/default/hooks/use-autosize-textarea\"\nimport { AudioVisualizer } from \"@/registry/default/ui/audio-visualizer\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport { FilePreview } from \"@/registry/default/ui/file-preview\"\nimport { InterruptPrompt } from \"@/registry/default/ui/interrupt-prompt\"\n\ninterface MessageInputBaseProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  value: string\n  submitOnEnter?: boolean\n  stop?: () => void\n  isGenerating: boolean\n  enableInterrupt?: boolean\n  transcribeAudio?: (blob: Blob) => Promise<string>\n}\n\ninterface MessageInputWithoutAttachmentProps extends MessageInputBaseProps {\n  allowAttachments?: false\n}\n\ninterface MessageInputWithAttachmentsProps extends MessageInputBaseProps {\n  allowAttachments: true\n  files: File[] | null\n  setFiles: React.Dispatch<React.SetStateAction<File[] | null>>\n}\n\ntype MessageInputProps =\n  | MessageInputWithoutAttachmentProps\n  | MessageInputWithAttachmentsProps\n\nexport function MessageInput({\n  placeholder = \"Ask AI...\",\n  className,\n  onKeyDown: onKeyDownProp,\n  submitOnEnter = true,\n  stop,\n  isGenerating,\n  enableInterrupt = true,\n  transcribeAudio,\n  ...props\n}: MessageInputProps) {\n  const [isDragging, setIsDragging] = useState(false)\n  const [showInterruptPrompt, setShowInterruptPrompt] = useState(false)\n\n  const {\n    isListening,\n    isSpeechSupported,\n    isRecording,\n    isTranscribing,\n    audioStream,\n    toggleListening,\n    stopRecording,\n  } = useAudioRecording({\n    transcribeAudio,\n    onTranscriptionComplete: (text) => {\n      props.onChange?.({ target: { value: text } } as any)\n    },\n  })\n\n  useEffect(() => {\n    if (!isGenerating) {\n      setShowInterruptPrompt(false)\n    }\n  }, [isGenerating])\n\n  const addFiles = (files: File[] | null) => {\n    if (props.allowAttachments) {\n      props.setFiles((currentFiles) => {\n        if (currentFiles === null) {\n          return files\n        }\n\n        if (files === null) {\n          return currentFiles\n        }\n\n        return [...currentFiles, ...files]\n      })\n    }\n  }\n\n  const onDragOver = (event: React.DragEvent) => {\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    setIsDragging(true)\n  }\n\n  const onDragLeave = (event: React.DragEvent) => {\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    setIsDragging(false)\n  }\n\n  const onDrop = (event: React.DragEvent) => {\n    setIsDragging(false)\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    const dataTransfer = event.dataTransfer\n    if (dataTransfer.files.length) {\n      addFiles(Array.from(dataTransfer.files))\n    }\n  }\n\n  const onPaste = (event: React.ClipboardEvent) => {\n    const items = event.clipboardData?.items\n    if (!items) return\n\n    const text = event.clipboardData.getData(\"text\")\n    if (text && text.length > 500 && props.allowAttachments) {\n      event.preventDefault()\n      const blob = new Blob([text], { type: \"text/plain\" })\n      const file = new File([blob], \"Pasted text\", {\n        type: \"text/plain\",\n        lastModified: Date.now(),\n      })\n      addFiles([file])\n      return\n    }\n\n    const files = Array.from(items)\n      .map((item) => item.getAsFile())\n      .filter((file) => file !== null)\n\n    if (props.allowAttachments && files.length > 0) {\n      addFiles(files)\n    }\n  }\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (submitOnEnter && event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault()\n\n      if (isGenerating && stop && enableInterrupt) {\n        if (showInterruptPrompt) {\n          stop()\n          setShowInterruptPrompt(false)\n          event.currentTarget.form?.requestSubmit()\n        } else if (\n          props.value ||\n          (props.allowAttachments && props.files?.length)\n        ) {\n          setShowInterruptPrompt(true)\n          return\n        }\n      }\n\n      event.currentTarget.form?.requestSubmit()\n    }\n\n    onKeyDownProp?.(event)\n  }\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n  const [textAreaHeight, setTextAreaHeight] = useState<number>(0)\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      setTextAreaHeight(textAreaRef.current.offsetHeight)\n    }\n  }, [props.value])\n\n  const showFileList =\n    props.allowAttachments && props.files && props.files.length > 0\n\n  useAutosizeTextArea({\n    ref: textAreaRef,\n    maxHeight: 240,\n    borderWidth: 1,\n    dependencies: [props.value, showFileList],\n  })\n\n  return (\n    <div\n      className=\"relative flex w-full\"\n      onDragOver={onDragOver}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n    >\n      {enableInterrupt && (\n        <InterruptPrompt\n          isOpen={showInterruptPrompt}\n          close={() => setShowInterruptPrompt(false)}\n        />\n      )}\n\n      <RecordingPrompt\n        isVisible={isRecording}\n        onStopRecording={stopRecording}\n      />\n\n      <div className=\"relative flex w-full items-center space-x-2\">\n        <div className=\"relative flex-1\">\n          <textarea\n            aria-label=\"Write your prompt here\"\n            placeholder={placeholder}\n            ref={textAreaRef}\n            onPaste={onPaste}\n            onKeyDown={onKeyDown}\n            className={cn(\n              \"z-10 w-full grow resize-none rounded-xl border border-input bg-background p-3 pr-24 text-sm ring-offset-background transition-[border] placeholder:text-muted-foreground focus-visible:border-primary focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n              showFileList && \"pb-16\",\n              className\n            )}\n            {...(props.allowAttachments\n              ? omit(props, [\"allowAttachments\", \"files\", \"setFiles\"])\n              : omit(props, [\"allowAttachments\"]))}\n          />\n\n          {props.allowAttachments && (\n            <div className=\"absolute inset-x-3 bottom-0 z-20 overflow-x-scroll py-3\">\n              <div className=\"flex space-x-3\">\n                <AnimatePresence mode=\"popLayout\">\n                  {props.files?.map((file) => {\n                    return (\n                      <FilePreview\n                        key={file.name + String(file.lastModified)}\n                        file={file}\n                        onRemove={() => {\n                          props.setFiles((files) => {\n                            if (!files) return null\n\n                            const filtered = Array.from(files).filter(\n                              (f) => f !== file\n                            )\n                            if (filtered.length === 0) return null\n                            return filtered\n                          })\n                        }}\n                      />\n                    )\n                  })}\n                </AnimatePresence>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"absolute right-3 top-3 z-20 flex gap-2\">\n        {props.allowAttachments && (\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"outline\"\n            className=\"h-8 w-8\"\n            aria-label=\"Attach a file\"\n            onClick={async () => {\n              const files = await showFileUploadDialog()\n              addFiles(files)\n            }}\n          >\n            <Paperclip className=\"h-4 w-4\" />\n          </Button>\n        )}\n        {isSpeechSupported && (\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className={cn(\"h-8 w-8\", isListening && \"text-primary\")}\n            aria-label=\"Voice input\"\n            size=\"icon\"\n            onClick={toggleListening}\n          >\n            <Mic className=\"h-4 w-4\" />\n          </Button>\n        )}\n        {isGenerating && stop ? (\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            className=\"h-8 w-8\"\n            aria-label=\"Stop generating\"\n            onClick={stop}\n          >\n            <Square className=\"h-3 w-3 animate-pulse\" fill=\"currentColor\" />\n          </Button>\n        ) : (\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            className=\"h-8 w-8 transition-opacity\"\n            aria-label=\"Send message\"\n            disabled={props.value === \"\" || isGenerating}\n          >\n            <ArrowUp className=\"h-5 w-5\" />\n          </Button>\n        )}\n      </div>\n\n      {props.allowAttachments && <FileUploadOverlay isDragging={isDragging} />}\n\n      <RecordingControls\n        isRecording={isRecording}\n        isTranscribing={isTranscribing}\n        audioStream={audioStream}\n        textAreaHeight={textAreaHeight}\n        onStopRecording={stopRecording}\n      />\n    </div>\n  )\n}\nMessageInput.displayName = \"MessageInput\"\n\ninterface FileUploadOverlayProps {\n  isDragging: boolean\n}\n\nfunction FileUploadOverlay({ isDragging }: FileUploadOverlayProps) {\n  return (\n    <AnimatePresence>\n      {isDragging && (\n        <motion.div\n          className=\"pointer-events-none absolute inset-0 z-20 flex items-center justify-center space-x-2 rounded-xl border border-dashed border-border bg-background text-sm text-muted-foreground\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.2 }}\n          aria-hidden\n        >\n          <Paperclip className=\"h-4 w-4\" />\n          <span>Drop your files here to attach them.</span>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\nfunction showFileUploadDialog() {\n  const input = document.createElement(\"input\")\n\n  input.type = \"file\"\n  input.multiple = true\n  input.accept = \"*/*\"\n  input.click()\n\n  return new Promise<File[] | null>((resolve) => {\n    input.onchange = (e) => {\n      const files = (e.currentTarget as HTMLInputElement).files\n\n      if (files) {\n        resolve(Array.from(files))\n        return\n      }\n\n      resolve(null)\n    }\n  })\n}\n\nfunction TranscribingOverlay() {\n  return (\n    <motion.div\n      className=\"flex h-full w-full flex-col items-center justify-center rounded-xl bg-background/80 backdrop-blur-sm\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.2 }}\n    >\n      <div className=\"relative\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <motion.div\n          className=\"absolute inset-0 h-8 w-8 animate-pulse rounded-full bg-primary/20\"\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1.2, opacity: 1 }}\n          transition={{\n            duration: 1,\n            repeat: Infinity,\n            repeatType: \"reverse\",\n            ease: \"easeInOut\",\n          }}\n        />\n      </div>\n      <p className=\"mt-4 text-sm font-medium text-muted-foreground\">\n        Transcribing audio...\n      </p>\n    </motion.div>\n  )\n}\n\ninterface RecordingPromptProps {\n  isVisible: boolean\n  onStopRecording: () => void\n}\n\nfunction RecordingPrompt({ isVisible, onStopRecording }: RecordingPromptProps) {\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ top: 0, filter: \"blur(5px)\" }}\n          animate={{\n            top: -40,\n            filter: \"blur(0px)\",\n            transition: {\n              type: \"spring\",\n              filter: { type: \"tween\" },\n            },\n          }}\n          exit={{ top: 0, filter: \"blur(5px)\" }}\n          className=\"absolute left-1/2 flex -translate-x-1/2 cursor-pointer overflow-hidden whitespace-nowrap rounded-full border bg-background py-1 text-center text-sm text-muted-foreground\"\n          onClick={onStopRecording}\n        >\n          <span className=\"mx-2.5 flex items-center\">\n            <Info className=\"mr-2 h-3 w-3\" />\n            Click to finish recording\n          </span>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\ninterface RecordingControlsProps {\n  isRecording: boolean\n  isTranscribing: boolean\n  audioStream: MediaStream | null\n  textAreaHeight: number\n  onStopRecording: () => void\n}\n\nfunction RecordingControls({\n  isRecording,\n  isTranscribing,\n  audioStream,\n  textAreaHeight,\n  onStopRecording,\n}: RecordingControlsProps) {\n  if (isRecording) {\n    return (\n      <div\n        className=\"absolute inset-[1px] z-50 overflow-hidden rounded-xl\"\n        style={{ height: textAreaHeight - 2 }}\n      >\n        <AudioVisualizer\n          stream={audioStream}\n          isRecording={isRecording}\n          onClick={onStopRecording}\n        />\n      </div>\n    )\n  }\n\n  if (isTranscribing) {\n    return (\n      <div\n        className=\"absolute inset-[1px] z-50 overflow-hidden rounded-xl\"\n        style={{ height: textAreaHeight - 2 }}\n      >\n        <TranscribingOverlay />\n      </div>\n    )\n  }\n\n  return null\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
